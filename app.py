# -*- coding: utf-8 -*-
"""zapp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcG2zTZkutJMO2Nf8399IVbep8q7Zvxr
"""

import streamlit as st
import tensorflow as tf
from PIL import Image 
import numpy as np
import ktrain

from numpy import array

import pandas as pd
from tensorflow import keras
predictor = ktrain.load_predictor('predictor')

st.write("This is an application to calculate Employee Mental Fatigue Score")
image = Image.open("IMG_2605.jpeg")
st.image(image, use_column_width=True)

WFH_Setup_Available =  st.text_input("is work from home enabled for you?")
Designation = st.text_input("what is your designation?")
Company_Type = st.text_input("What is your Company Type?")
Average_hours_worked_per_day = st.text_input("how many hours you work on an average per day?")
Employee_satisfaction_score = st.text_input("Please enter your satisfaction score on scale of 10")

data = {'WFH_Setup_Available':WFH_Setup_Available,'Designation':Designation, 'Company_Type':Company_Type, 
        'Average_hours_worked_per_day': Average_hours_worked_per_day, 'Employee_satisfaction_score': Employee_satisfaction_score}

data = pd.DataFrame([data])



def mental_fatigue_score(WFH_Setup_Available, Designation, Company_Type, Average_hours_worked_per_day, Employee_satisfaction_score):
  prediction = predictor.predict(data)
  if prediction <= 0.3:
    prediction = 'have poor mental health, please work on it, you can follow  https://www.mhanational.org/31-tips-boost-your-mental-health'
  elif 0.3 < prediction < 0.5:
    prediction = "need to work a bit on your Mental Health, Please follow https://community.virginpulse.com/work-from-home-exercises-to-keep-employees-active-and-healthy"
  else:
    prediction = "have good mental health, keep it up"

  print(prediction)
  return prediction

def Score():
  Score = predictor.predict(data)
  return Score

  

if st.button("Predict"):
  result= mental_fatigue_score(WFH_Setup_Available, Designation, Company_Type, Average_hours_worked_per_day, Employee_satisfaction_score)
  st.success('YouÂ {}'.format(result))
  result1 = Score()
  st.success('Your Score is {}'.format(int(result1*100)))







